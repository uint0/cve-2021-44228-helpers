import sys

from twisted.internet.protocol import ServerFactory
from ldaptor.protocols.ldap.ldapserver import LDAPServer
from ldaptor.protocols.ldap.distinguishedname import InvalidRelativeDistinguishedName


class Server(LDAPServer):
    def handle_LDAPSearchRequest(self, request, *args, **kwargs):
        try:
            super().handle_LDAPSearchRequest(request, *args, **kwargs)
        except InvalidRelativeDistinguishedName:
            peer = self.transport.getPeer()
            print(f'{peer.type.lower()}://{peer.host}:{peer.port} => {request.baseObject.decode()}')


class LDAPServerFactory(ServerFactory):
    def buildProtocol(self, _):
        return Server()


if __name__ == "__main__":
    from twisted.internet import reactor

    port = int(sys.argv[1]) if len(sys.argv) > 1 else 1389

    reactor.listenTCP(port, LDAPServerFactory())
    reactor.run()